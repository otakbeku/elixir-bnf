# Error Handling

<try_rescue_catch_after> ::= try do <expression_list> <try_error_handling> end
    | try do <expression_list> <try_error_handling> <try_final_handling> end
<try_error_handling> ::= rescue <right_arrow_expr_list>
    | catch <right_arrow_expr_list>
    | rescue <right_arrow_expr_list> catch <right_arrow_expr_list>
<try_final_handling> ::= <try_else_term>
    | <try_after_term>
    | <try_else_term> <try_after_term>
<try_else_term> ::= else <right_arrow_expr_list>
<try_after_term> ::= after <expression_list>
<try_expression_list> ::= <right_arrow_expr_list> | <right_arrow_expr_list> <expression_list>
<right_arrow_expr_list> ::= <right_arrow_expr>; | <right_arrow_expr>; <right_arrow_expr_list>
<right_arrow_expr> ::= <parameter_list> -> <expression_list>

# Case

<case_expr> ::= case <patterns> do <case_clause_exprs> end
<patterns> ::= <list> | <tuple> | <term>
<case_clause_exprs> ::= <case_clause_expr> | <case_clause_expr><case_clause_exprs>
<case_clause_expr> ::= <case_condition_expr> -> <case_result>
<case_condition_expr> ::= _ | <integer> | <float> | <alpha> | <guards> | :error | <term> | ^<term>
<guards> ::= <guard_clause> when <guards_expr>
<guards_expr> ::= <comparison_expr>
    | <boolean_strict_expr>
    | <arithmetic_expr>
    | <unary_expr>
    | <in_comparison_operator>
    | <bitwise_expr>
<case_result> ::= <term>
<guard_clause> ::= <def_token> <function_head> | <term>

# Case supplementary
<function_arity> ::= <non_neg_integer> | <boolean>
<exception_name> ::= <alpha>
<struct_name> ::= <alpha>

# Map
<map>::= %{<key_value_pairs>}
<key_value_pairs> ::= <key_value_pair> | <key_value_pair>, <key_value_pairs>
<key_value_pair> ::= <map_key>: <map_key_value>
<map_key>::= <term> | <boolean> | <atom>
<map_key_value> ::= <term> | <boolean>


# Cond
<cond_expr> ::= cond do <cond_clauses> end
<cond_clauses> ::= <cond_clause> | <cond_clause> <cond_clauses>
<cond_clause> ::= <conditions> -> <expression_list>
<conditions> ::= <comparison_expr>

# if
<if_expr> ::= if <if_clauses> do: <expression_list> end | if <if_clauses> do: <expression_list>, else <expression_list> end
<if_clauses> ::= <comparison_expr>

# unless
<unless_expr> ::= unless <unless_clauses> do <expression_list> end
<unless_clauses> ::= <comparison_expr>