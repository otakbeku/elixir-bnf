# Basic terminology

<alpha> ::= <alpha_lower> | <alpha_upper> | _
<alpha_upper> ::= A | B | C | E | G | H | J | K | L | M | N | P | R | S | T | U | V | W | X | Y | Z
<alpha_lower> ::= a | b | c | e | g | h | j | k | l | m | n | p | r | s | t | u | v | w | x | y | z
<special_character> ::= ! | $ | % | & | ( | ) | * | + | , | - | . | / | : | ; | < | = | > | ? | @ | [ | ] | ^ | _ | ` | { | | | } | ~
<escape_codes> ::= " | ' | \ | a | b | d | e | f | n | r | s | t | v | 0 | #
<decimal_digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<binary_digit> ::= 0 | 1
<octal_digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
<hexadecimal_digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | A | B | C | D | E | F | a | b | c | d | e | f
<alphanum> ::= <alpha> | <decimal_digit>
<term> ::= <integer>
    | <float>
    | <boolean>
    | <atom>
    | <nested_alias>
    | <string>
    | <charlist>
    | <sigil>
    | <list>
    | <tuple>
    | <map>
    | <struct>

<assignment> ::= <variable_name> = <expression>
<variable_name> ::= <identifier_name>
<expression_list> ::= <expression>; | <expression>; <expression_list>

# Expressions

<expression> ::= <assignment>
    | <module_function_expression>
    | <operator_expr>
    | <operator_term_expr>
    | <operator_variable>
    | <term>

# Identifier

<identifier_name> ::= <identifier_start>
    | <identifier_start><identifier_end>
    | <identifier_start><identifier_continue><identifier_end>
<identifier_start> ::= <alpha_lower> | _
<identifier_continue> ::= <alphanum> | <alphanum><identifier_continue>
<identifier_end> ::= <alphanum>
    | ?
    | !

# Integer

<integer> ::= <non_neg_integer>
    | <neg_integer>
<neg_integer> ::= -<non_neg_integer>
<non_neg_integer> ::= <decimal> | <binary> | <octal> | <hexadecimal>
<decimal> ::= <decimal_digit> | <decimal_digit><decimal_continue>
<decimal_continue> ::= <decimal_digit>
    | _ <decimal_digit>
    | <decimal_digit> <decimal_continue>
    | _ <decimal_digit> <decimal_continue>
<binary> ::= 0b<binary_term>
<binary_term> ::= <binary_digit> | <binary_digit><binary_continue>
<binary_continue> ::= <binary_digit>
    | _ <binary_digit>
    | <binary_digit> <binary_continue>
    | _ <binary_digit> <binary_continue>
<octal> ::= 0o<octal_term>
<octal_term> ::= <octal_digit> | <octal_digit><octal_continue>
<octal_continue> ::= <octal_digit>
    | _ <octal_digit>
    | <octal_digit> <octal_continue>
    | _ <octal_digit> <octal_continue>
<hexadecimal> ::= 0x<hexadecimal_term>
<hexadecimal_term> ::= <hexadecimal_digit> | <hexadecimal_digit><hexadecimal_continue>
<hexadecimal_continue> ::= <hexadecimal_digit>
    | _ <hexadecimal_digit>
    | <hexadecimal_digit> <hexadecimal_continue>
    | _ <hexadecimal_digit> <hexadecimal_continue>

# Float

<float> ::= <neg_float>
    | <non_neg_float>
<neg_float> ::= -<non_neg_float>
<non_neg_float> ::= <decimal>.<decimal> | <decimal>.<decimal>e+<decimal> | <decimal>.<decimal>e-<decimal>

# Boolean

<boolean> ::= true | false | :true | :false

# Atom/Symbol

<atom> ::= :<operator>
    | :<alpha>
    | :<alpha><atom_term_continue>
    | :<alpha><atom_term_continue><atom_term_end>
    | :<string>
    | <boolean>
    | <nested_alias>
<atom_term_continue> ::= <alphanum> | <alphanum><atom_term_continue>
<atom_term_end> ::= <alphanum>
    | ?
    | !

# Alias

<nested_alias> ::= <alias> | <alias>.<nested_alias>
<alias> ::= <alpha_upper><alias_term_list>
<alias_term_list> ::= <alphanum> | <alphanum><alias_term_list>

<aliasing_alias> ::= alias <nested_alias> | alias <nested_alias>, as: <alias>
<require_alias> ::= require <nested_alias> | require <nested_alias>.{<alias_list>}
<alias_list> ::= <nested_alias>, <alias_list>
<import_alias> ::= import <nested_alias> | import <nested_alias>, <import_options> <keyword_list>
<import_options> ::= only: | except:
<use_alias> ::= use <nested_alias>

# String

<string>::="<string_term_list>"
<string_term_list> ::= <string_term> | <string_term><string_term_list>
<string_term> ::=
    | <string_term_vanilla>
    | <string_interpolation>
<string_term_vanilla> ::= '
    | <alpha>
    | <decimal>
    | <special_characters>
    | <escape_sequence>
<string_interpolation> ::= #{ <expression> }
<escape_sequence> ::= \<escape_codes>
    | \x<decimal_digit><decimal_digit>
    | \u<decimal_digit><decimal_digit><decimal_digit><decimal_digit>
    | \u{<decimal>}


# Char List

<charlist>::='<charlist_term_list>'
<charlist_term_list> ::= <charlist_term> | <charlist_term><charlist_term_list>
<charlist_term> ::= "
    | <alpha>
    | <decimal>
    | <special_characters>
    | <escape_sequence>
    | <string_interpolation>

# List
<list> ::= [<list_element_array>]
<list_element_array> ::= <list_element> | <list_element>,<list_element_array>
<list_elements> ::= <term>


# Tuple

<tuple> ::= {<tuple_element_array>}
<tuple_element_array> ::= <tuple_elements> | <tuple_elements>,<tuple_element_array>
<tuple_elements> ::= <string>
    |<atom>
    |<integer>
    |<term>

# Sigil

<sigil> ::= ~<sigil_char><sigil_args><sigil_modifier>
<sigil_args> ::= / <string_term_list> /
    | | <string_term_list> |
    | " <string_term_list> "
    | ' <string_term_list> '
    | ( <string_term_list> )
    | [ <string_term_list> ]
    | { <string_term_list> }
    | < <string_term_list> >
<sigil_char> ::= <alpha>
<sigil_modifier> ::= <alpha>

# Map
<map>::= %{<key_value_pairs>}
<key_value_pairs> ::= <key_value_pair> | <key_value_pair>, <key_value_pairs>
<key_value_pair> ::= <map_key>: <map_key_value>
<map_key>::= <term> | <boolean> | <atom>
<map_key_value> ::= <term> | <boolean>

# Struct
<struct> ::= %<nested_alias>{<key_value_pairs>}
